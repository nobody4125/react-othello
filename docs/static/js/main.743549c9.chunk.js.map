{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["boardSize","numSquares","blackStone","getSquareID","square","isInside","enumerateAffectedSquares","stones","id","stone","_getSquare","Math","floor","getSquare","_getSquare2","Object","slicedToArray","sr","sc","squares","dr","dc","flag","candidates","push","concat","Square","props","color","value","react_default","a","createElement","className","onClick","fill","r","cx","cy","Board","_this","this","boardRows","_loop","key","toConsumableArray","Array","map","_","c","renderSquare","i","_this2","React","Component","Game","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","makeInitialStones","turn","setState","r1","r2","c1","c2","console","log","length","canPutStone","newStones","slice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","putStone","alert","reset","_this4","handleClick","Game_Board","handleClickSquare","App","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.743549c9.chunk.js","sourcesContent":["import React from 'react';\nimport './Game.css';\n\nconst boardSize = 8;\n\nconst numSquares = boardSize * boardSize;\nconst blackStone = 1;\nconst whiteStone = 0;\n\nfunction getSquareID(square) {\n  return boardSize * square[0] + square[1];\n}\n\nfunction getSquare(id) {\n  return [Math.floor(id / boardSize), id % boardSize];\n}\n\nfunction isInside(square) {\n  return 0 <= square[0] && square[0] < boardSize &&\n         0 <= square[1] && square[1] < boardSize;\n}\n\nfunction enumerateAffectedSquares(stones, id, stone) {\n  const [sr, sc] = getSquare(id);\n  let squares = [[sr, sc]];\n\n  for (let dr = -1; dr <= 1; dr++) {\n    for (let dc = -1; dc <= 1; dc++) {\n      if (dr === 0 && dc === 0) continue;\n\n      let square = [sr + dr, sc + dc],\n          flag = false,\n          candidates = [];\n\n      while (isInside(square) && stones[getSquareID(square)] === stone ^ 1) {\n        candidates.push(square);\n        square = [square[0] + dr, square[1] + dc];\n        flag = true;\n      }\n\n      if (flag && isInside(square) && stones[getSquareID(square)] === stone) {\n        squares = squares.concat(candidates);\n      }\n    }\n  }\n  return squares;\n}\n\nfunction canPutStone(stones, id, stone) {\n  console.log(enumerateAffectedSquares(stones, id, stone));\n  return stones[id] === null && enumerateAffectedSquares(stones, id, stone).length > 1;\n}\n\nfunction putStone(stones, id, stone) {\n  const newStones = stones.slice();\n\n  for (let square of enumerateAffectedSquares(stones, id, stone)) {\n    newStones[getSquareID(square)] = stone;\n  }\n\n  return newStones;\n}\n\n/*\n * React Component\n */\n\nfunction Square(props) {\n  let color = \"green\";\n  if (props.value !== null) {\n    color = props.value === blackStone ? \"black\" : \"white\";\n  }\n\n  return (\n    <svg className=\"square\" onClick={props.onClick}>\n      { <circle fill={color} r=\"10\" cx=\"25\" cy=\"25\" /> }\n    </svg>\n  );\n}\n\nclass Board extends React.Component {\n  render() {\n    const boardRows = [];\n\n    for (let r = 0; r < boardSize; r++) {\n      boardRows.push(\n        <div key={r} className=\"board-row\">\n          { [...Array(boardSize)].map((_, c) => this.renderSquare(getSquareID([r, c]))) }\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"board\">\n        { boardRows }\n      </div>\n    );\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.stones[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stones: this.makeInitialStones(),\n      turn: 1,\n    };\n  }\n\n  reset() {\n    this.setState({\n      stones: this.makeInitialStones(),\n      turn: 1,\n    });\n  }\n\n  makeInitialStones() {\n    // 初期配置\n    const stones = Array(numSquares).fill(null);\n    const r1 = Math.floor((boardSize - 1) / 2),\n          r2 = r1 + 1,\n          c1 = Math.floor((boardSize - 1) / 2),\n          c2 = c1 + 1;\n    stones[getSquareID([r1, c2])] = stones[getSquareID([r2, c1])] = blackStone;\n    stones[getSquareID([r1, c1])] = stones[getSquareID([r2, c2])] = whiteStone;\n\n    return stones;\n  }\n\n  handleClickSquare(i) {\n    const stone = this.state.turn % 2 === 1 ? blackStone : whiteStone;\n\n    if (!canPutStone(this.state.stones, i, stone)) {\n      return;\n    }\n    const stones = putStone(this.state.stones, i, stone);\n\n    this.setState({\n      stones: stones,\n      turn: this.state.turn + 1,\n    });\n  }\n\n  handleClick() {\n    const message = \"YOU LOSE!!!! （ﾌﾞｳｳｳｳｳｳ!!!!）\\n\" +\n                    \"俺の勝ち！\\n\" +\n                    \"何で負けたか、明日まで考えといてください。\\n\" +\n                    \"そしたら何かが見えてくるはずです。\\n\" +\n                    \"ほな、いただきます。\";\n    alert(message);\n    this.reset();\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div>\n          <button onClick={() => this.handleClick()}>Reset</button>\n          turn: {this.state.turn}\n        </div>\n        <Board\n          stones={this.state.stones}\n          onClick={(i) => this.handleClickSquare(i)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        React Othello\n      </header>\n      {/*\n      <header className=\"App-header\">\n      </header>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      */}\n\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}